from llm.base import LLMProvider
import os
from cerebras.cloud.sdk import Cerebras
from typing import Generator

class CerebrasProvider(LLMProvider):
    """
    An LLM provider that uses the Cerebras Cloud API and supports streaming.
    """
    def __init__(self):
        self.client = Cerebras(api_key=os.environ.get("CEREBRAS_API_KEY"))
        self.model = "qwen-3-32b"

    def query(self, system_prompt: str, user_prompt: str) -> Generator[str, None, None]:
        """
        Sends a streaming query to a Llama model via the Cerebras API.
        Note: Cerebras API does not currently use a system prompt in its messages.

        Args:
            system_prompt: The instruction or context (ignored by this provider).
            user_prompt: The user's direct question or input.

        Yields:
            Chunks of the text response as they are generated by the LLM.
        """
        stream = self.client.chat.completions.create(
            messages=[
                {"role": "user", "content": user_prompt}
            ],
            temperature=0,
            model=self.model,
            stream=True,
        )

        for chunk in stream:
            content = chunk.choices[0].delta.content
            if content:
                yield content 